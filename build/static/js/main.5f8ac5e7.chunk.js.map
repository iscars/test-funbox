{"version":3,"sources":["../../funbox/src/fake-db/goods.js","../../funbox/src/redux/ducks/goods.js","../../funbox/src/redux/reducer.js","../../funbox/src/redux/ducks/utils.js","../../funbox/src/redux/saga.js","../../funbox/src/redux/index.js","../../funbox/src/components/Card.js","../../funbox/src/components/CardList.js","../../funbox/src/components/Root.js","../../funbox/src/components/App.js","../../funbox/src/serviceWorker.js","../../funbox/src/index.js"],"names":["goodsDB","id","segment","title","description","specs","weight","notes","availability","FETCH_REQUEST","concat","FETCH_SUCCESS","SELECT_EVENT","ReducerRecord","Record","goods","OrderedSet","selected","loading","EventRecord","entitiesSelector","createSelector","state","eventListSelector","entities","toJS","fetchGoodsSaga","regenerator_default","a","mark","data","wrap","_context","prev","next","put","type","payload","stop","saga","_context2","t0","all","takeEvery","t1","sent","t2","combineReducers","Object","defineProperty","arguments","length","undefined","action","set","RecordModel","Map","map","value","dataToEntities","contains","update","remove","add","rootSaga","goodsSaga","_marked","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","reducer","run","Card","checked","checkedHover","getSpecs","react_default","createElement","className","_this","props","event","getSpec","index","key","Fragment","handleChange","setState","selectEvent","setCheckedHover","this","onMouseLeave","disabled","onChange","htmlFor","classNames","Component","Root","getGoods","components_Card","fetchGoods","goodList","console","log","connect","CardList","App","react_redux_es","components_Root","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f8ac5e7.chunk.js","sourcesContent":["export const goodsDB = [\n    {\n        'id'          : '1',\n        'segment'     : 'Сказочное заморское яство',\n        'title'       : 'Нямушка',\n        'description' : 'с фуа-гра',\n        'specs'       : [\n            [10, 'порций'],\n            [1, 'мышь в подарок']\n        ],\n        'weight'      : [0.5, 'кг'],\n        'notes'       : 'Печень утки разварная с артишоками.',\n        'availability': true\n    },\n    {\n        'id'          : '2',\n        'segment'     : 'Сказочное заморское яство',\n        'title'       : 'Нямушка',\n        'description' : 'с рыбой',\n        'specs'       : [\n            [40, 'порций'],\n            [2, 'мыши в подарок']\n        ],\n        'weight'      : [2, 'кг'],\n        'notes'       : 'Головы щучьи с чесноком да свежайшая сёмгушка.',\n        'availability': true\n    },\n    {\n        'id'          : '3',\n        'segment'     : 'Сказочное заморское яство',\n        'title'       : 'Нямушка',\n        'description' : 'с курой',\n        'specs'       : [\n            [100, 'порций'],\n            [5, 'мышей в подарок'],\n            'заказчик доволен'\n        ],\n        'weight'      : [5, 'кг'],\n        'notes'       : 'Филе из цыплят с трюфелями в бульоне.',\n        'availability': false\n    }\n]","import {all, put, takeEvery} from 'redux-saga/effects'\nimport {Record, OrderedSet} from 'immutable'\nimport {createSelector} from 'reselect'\nimport {goodsDB} from '../../fake-db/goods'\nimport {dataToEntities} from './utils'\n\n\nexport const moduleName = 'goods'\nconst prefix = moduleName\nexport const FETCH_REQUEST = `${prefix}/FETCH_REQUEST`\nexport const FETCH_SUCCESS = `${prefix}/FETCH_SUCCESS`\nexport const SELECT_EVENT = `${prefix}/SELECT_EVENT`\n\n\nexport const ReducerRecord = Record({\n    goods: new OrderedSet([]),\n    selected: new OrderedSet([]),\n    loading: false\n})\n\nexport const EventRecord = Record({\n    id: null,\n    segment: null,\n    title: null,\n    description: null,\n    specs: null,\n    weight: null,\n    notes: null,\n    availability: null\n})\n\n\nexport default function reducer(state = new ReducerRecord(), action) {\n    const {type, payload} = action\n\n    switch (type) {\n        case FETCH_REQUEST:\n            return state.set('loading', true)\n\n        case FETCH_SUCCESS:\n            return state\n                .set('loading', false)\n                .set('goods', dataToEntities(payload, EventRecord))\n\n        case SELECT_EVENT:\n            return state.selected.contains(payload.id)\n                ? state.update('selected', selected => selected.remove(payload.id))\n                : state.update('selected', selected => selected.add(payload.id))\n\n        default:\n            return state\n    }\n}\n\n\nexport const stateSelector = state => state[moduleName]\nexport const entitiesSelector = createSelector(stateSelector, state => state.goods)\nexport const eventListSelector = createSelector(entitiesSelector, entities => entities.toJS())\n\n\nexport function fetchGoods() {\n    return {\n        type: FETCH_REQUEST\n    }\n}\n\nexport const fetchGoodsSaga = function * () {\n    const data = goodsDB\n    yield put({\n        type: FETCH_SUCCESS,\n        payload: data\n    })\n}\n\nexport function selectEvent(id) {\n    return {\n        type: SELECT_EVENT,\n        payload: {id}\n    }\n}\n\nexport const saga = function * () {\n    yield all([\n        yield takeEvery(FETCH_REQUEST, fetchGoodsSaga)\n    ])\n}","import {combineReducers} from 'redux'\nimport goodsReducer, {moduleName as goodsModule} from './ducks/goods'\n\nexport default combineReducers({\n    [goodsModule]: goodsReducer\n})","import {OrderedSet, Map} from 'immutable'\n\nexport function dataToEntities(data, RecordModel = Map) {\n    const immutableData = new OrderedSet(data).map(\n        value => new RecordModel(value)\n    )\n    return immutableData\n}","import {saga as goodsSaga} from './ducks/goods'\nimport {all} from 'redux-saga/effects'\n\nexport  default function * rootSaga() {\n    yield all([\n        goodsSaga()\n    ])\n\n}","import {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducer'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './saga'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst enhancer = applyMiddleware(sagaMiddleware)\nconst store = createStore(reducer, enhancer)\nsagaMiddleware.run(rootSaga)\n\nexport default store","import React, {Component} from 'react'\nimport classNames from 'classnames'\n\nclass Card extends Component {\n    state = {\n        checked: false,\n        checkedHover: false\n    }\n\n    render() {\n        const {event} = this.props\n\n        return (\n            <div onMouseLeave={this.setCheckedHover} className=\"card\">\n                <input type=\"checkbox\"\n                       disabled={!event.availability}\n                       checked={this.state.checked}\n                       onChange={this.handleChange}\n                       id={event.id}\n                       className=\"card__input\"\n                />\n                <label htmlFor={event.id}\n                       className={classNames(\"card__label-content\", !event.availability && \"disabled\")}\n                >\n                    <div className=\"card__panel\">\n                        <div className=\"card__panel-inner\">\n                            <div className=\"card__panel-inner-corner\"/>\n                        </div>\n                    </div>\n                    <div className=\"card__body\">\n                        <div className=\"offer\">\n                            <div className=\"offer__body card__offer-body\">\n                                <div className={classNames(\n                                    \"offer__segment\", this.state.checkedHover && \"card__checked-not-hover\"\n                                )}\n                                >\n                                    {event.segment}\n                                </div>\n                                {\n                                    this.state.checkedHover\n                                    && <div className=\"offer__tip card__checked-hover\">Котэ не одобряет?</div>\n                                }\n                                <div className=\"offer__name\">{event.title}</div>\n                                <div className=\"offer__description\">{event.description}</div>\n                                {this.getSpecs()}\n                            </div>\n                            <div className=\"offer__quantity card__quantity\">\n                                <span className=\"offer__quantity-lg\">{event.weight[0]}</span>\n                                <span className=\"offer__quantity-sm\">{event.weight[1]}</span>\n                            </div>\n                        </div>\n                    </div>\n                </label>\n                <div className=\"card__notes\">\n                    {\n                        event.availability ? (\n                            this.state.checked ? (\n                                <span>\n                                    {event.notes}\n                                </span>\n\n                            ) : (\n                                <React.Fragment>\n                                    <span>Чего сидишь? Порадуй котэ, </span>\n                                    <label htmlFor={event.id} className=\"card__label-notes\">купи.</label>\n                                </React.Fragment>\n                            )\n                        ) : (\n                            <span className=\"text-attention\">Печалька, {event.description} закончился</span>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    getSpecs = () => (\n        <ul className=\"offer__specs\">\n            {this.props.event.specs.map(this.getSpec)}\n        </ul>\n    )\n\n    getSpec = (event, index) => (\n        <li key={index}>\n            {\n                event.map ? (\n                    <React.Fragment>\n                        {event[0] !== 1 && <strong>{event[0]} </strong>}\n                        {event[1]}\n                    </React.Fragment>\n                ) : event\n            }\n        </li>\n    )\n\n    handleChange = () => {\n        this.setState({checked: !this.state.checked})\n        this.state.checked && this.setState({checkedHover: false})\n        this.props.selectEvent(this.props.event.id)\n    }\n\n    setCheckedHover = () => {\n        this.state.checked && !this.state.checkedHover && this.setState({checkedHover: true})\n    }\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {moduleName, fetchGoods, eventListSelector, selectEvent} from '../redux/ducks/goods'\nimport Card from './Card'\n\nclass Root extends Component {\n    componentWillMount() {\n        this.props.fetchGoods()\n    }\n\n    render() {\n        if (this.props.loading) return <div>Loading goods list...</div>\n        const goodList = this.getGoods(this.props.goods)\n        console.log(this.props.selected.toJS())\n\n        return (\n            <ul className=\"grid\">\n                {goodList}\n            </ul>\n        )\n    }\n\n    getGoods = goods => (\n        goods.map(event => (\n            <li key={event.id} className=\"grid__item\">\n                <Card event={event} selectEvent={this.selectEvent}/>\n            </li>\n        ))\n    )\n\n    selectEvent = id => {\n        this.props.selectEvent(id)\n    }\n}\n\nexport default connect(state => ({\n    goods: eventListSelector(state),\n    loading: state[moduleName].loading,\n    selected: state[moduleName].selected\n}), {fetchGoods, selectEvent})(Root)\n","import React, { Component } from 'react'\nimport CardList from './CardList'\n\nclass Root extends Component {\n    render() {\n        return (\n            <main className=\"container\">\n                <div className=\"title\">Ты сегодня покормил кота?</div>\n                <CardList/>\n            </main>\n        )\n    }\n}\n\nexport default Root\n","import React, {Component} from 'react'\nimport store from '../redux/'\nimport {Provider} from 'react-redux'\nimport Root from './Root'\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Root/>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/app.sass'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}